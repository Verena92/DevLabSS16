package de.hdm.wim.events;

import java.util.ArrayList;
import java.util.List;

import de.hdm.wim.events.EventService;
import de.hdm.wim.events.model.event.User;

import de.hdm.wim.events.model.event.InternalToken;
import de.hdm.wim.events.model.event.KeywordInformation;
import de.hdm.wim.events.model.Project;
import de.hdm.wim.events.model.Company;
import de.hdm.wim.events.model.Employee;
import de.hdm.wim.events.model.Document;
import de.hdm.wim.events.model.DocumentForSpeechTokenizer;
import de.hdm.wim.events.model.event.ProjectReceivedEvent;
import de.hdm.wim.events.model.event.CompanyReceivedEvent;
import de.hdm.wim.events.model.event.EmployeeReceivedEvent;
import de.hdm.wim.events.model.event.DocumentReceivedEvent;
import de.hdm.wim.events.model.event.DocumentSuggestionReactionEvent;
import de.hdm.wim.events.model.event.DocumentClassOccuredEvent;
import de.hdm.wim.events.model.event.DocumentSentEvent;

import de.hdm.wim.events.documentrepresentation.DocumentRepresentationRequester;
import de.hdm.wim.events.documentrepresentation.SearchRequest;
import de.hdm.wim.events.documentrepresentation.DocumentIDsWrapper;
import de.hdm.wim.events.speechtokenizer.SpeechTokenSender;

global java.util.List resultList;

/////////////////////////////////////////////////////
////////////// Event Declarations ///////////////////
/////////////////////////////////////////////////////

declare InternalToken
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(2m)
end

declare DocumentSuggestionReactionEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(2m)
end

declare ProjectReceivedEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(5s)
end

declare CompanyReceivedEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(5s)
end

declare EmployeeReceivedEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(5s)
end

declare DocumentReceivedEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(30s)
end

declare DocumentSentEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(5s)
end

declare DocumentClassOccuredEvent
    @role( event )
    @timestamp( timestamp.getTime() ) //long
    @expires(2m)
end


//////////////////////////////////////////////////////
///////////// SpeechToken -> Events //////////////////
//////////////////////////////////////////////////////

// >>>>simple "If a Token with exactly 1 related 'entity' occured' rules

rule "A Token with exactly 1 related project occured"
    when
        $t : InternalToken( keywordInformation.projects.size() == 1, 
        			keywordInformation.companies.empty,
        			keywordInformation.employees.empty) from entry-point SpeechTokenEventStream 
    then
      System.out.println( "A Token with exactly 1 related project occured");
      resultList.add( "A Token with exactly 1 related project occured");
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
      Project project = requester.getProject($t.getKeywordInformation().getProjects().get(0));
      ProjectReceivedEvent projectReceivedEvent = new ProjectReceivedEvent( project);
      new EventService().insertCustom(projectReceivedEvent);
end

rule "A Token with exactly 1 related company occured"
    when
        $t : InternalToken( keywordInformation.projects.empty, 
        			keywordInformation.companies.size() == 1,
        			keywordInformation.employees.empty) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with exactly 1 related company occured");
      System.out.println( "A Token with exactly 1 related company occured"); 
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
      Company company = requester.getCompany($t.getKeywordInformation().getCompanies().get(0));
      CompanyReceivedEvent companyReceivedEvent = new CompanyReceivedEvent( company);
      new EventService().insertCustom( companyReceivedEvent );
end

rule "A Token with exactly 1 related employee occured"
    when
        $t : InternalToken( keywordInformation.projects.empty, 
        			keywordInformation.companies.empty,
        			keywordInformation.employees.size() == 1) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with exactly 1 related employee occured");
      System.out.println( "A Token with exactly 1 related employee occured");
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
      Employee employee = requester.getEmployee($t.getKeywordInformation().getEmployees().get(0));
      EmployeeReceivedEvent employeeReceivedEvent = new EmployeeReceivedEvent( employee);
      new EventService().insertCustom( employeeReceivedEvent );
end

// >>>>DocumentClass related Rules - 

rule "A Token with a documentClass occured"
    when
        $tdc : InternalToken( keywordInformation.projects.empty, 
        			keywordInformation.companies.empty,
        			keywordInformation.employees.empty) from entry-point SpeechTokenEventStream
    then
      resultList.add( "A Token with a documentClass occured");
      System.out.println( "A Token with a documentClass occured");
      
      DocumentClassOccuredEvent documentClassOccuredEvent = new DocumentClassOccuredEvent( $tdc.getKeyword());
      new EventService().insertCustom( documentClassOccuredEvent );
end

rule "A Token with a documentClass occured and Token(s) with several related projects occured"
    when
        $dcoe : DocumentClassOccuredEvent(  ) from entry-point SpeechTokenEventStream
        $t : InternalToken( keywordInformation.projects.size() > 0, 
        			keywordInformation.companies.empty,
        			keywordInformation.employees.empty, this after[-1m,1m] $dcoe) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with a documentClass occured and Token(s) with several related projects occured");
      System.out.println( "A Token with a documentClass occured and Token(s) with several related projects occured");
      
       DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
	  List<String> employees = new ArrayList<String>();
	  //employees.add( $t.getUser().getGoogle_id()); // wir wollen nicht weiter nach Speaker eingrenzen, da die Suche nur nach 'created_by' filtert und das zu eingeschräkt ist.
	  List<String> companies = new ArrayList<String>();
	  List<String> projects = $t.getKeywordInformation().getProjects();
	  
	  for( String project: projects) {
	  
	      List<String> projectList = new ArrayList<String>();
	      projectList.add( project);
		  SearchRequest searchRequest = new SearchRequest(employees, companies, projectList, $dcoe.getKeyword());
		  
		  DocumentIDsWrapper wrapper =  requester.getDocumentIDs(searchRequest);
		  
		  List<String> docIdList = new ArrayList<String>();
		  docIdList = wrapper.getDocuments();
		  
		  for( String docId: docIdList){
			    Document document = requester.getDocument(docId);
			  	DocumentReceivedEvent documentReceivedEvent = new DocumentReceivedEvent( document);
			  	new EventService().insertCustom( documentReceivedEvent);
		   }
	  }
end


// >>>>Reaction Rules

rule "A document suggestion was accepted"
    when
    	$dsre : DocumentSuggestionReactionEvent(  accepted == true) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A DocumentSuggestion was accepted");
      System.out.println( "A DocumentSuggestion was accepted");
end

rule "A document suggestion was declined"
    when
    	$dsre : DocumentSuggestionReactionEvent(  accepted == false) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A DocumentSuggestion was declined");
      System.out.println( "A DocumentSuggestion was declined");
end

//////////////////////////////////////////////////////
////////// Events -> DocumentRepresentation //////////
//////////////////////////////////////////////////////

rule "Request a document for a project"
    when
      $pre : ProjectReceivedEvent() from entry-point SpeechTokenEventStream ;
    then
      resultList.add( "Request a document for a project");
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
	  List<String> employees = new ArrayList<String>();
	  List<String> companies = new ArrayList<String>();
	  List<String> projects = new ArrayList<String>();
	  projects.add( $pre.getProject().getProjectID());
	  SearchRequest searchRequest = new SearchRequest(employees, companies, projects, null);
	  DocumentIDsWrapper wrapper =  requester.getDocumentIDs(searchRequest);
	  
	  List<String> docIdList = new ArrayList<String>();
	  docIdList = wrapper.getDocuments();
	  
	  for( String docId: docIdList){
		    Document document = requester.getDocument(docId);
		  	DocumentReceivedEvent documentReceivedEvent = new DocumentReceivedEvent( document);
		  	new EventService().insertCustom( documentReceivedEvent);
	   }
end

rule "Request a document for a company"
    when
      $cre : CompanyReceivedEvent() from entry-point SpeechTokenEventStream ;
    then
      resultList.add( "Request a document for a company");
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
	  List<String> employees = new ArrayList<String>();
	  List<String> companies = new ArrayList<String>();
	  companies.add($cre.getCompany().getCompanyID());
	  List<String> projects = new ArrayList<String>();
	  SearchRequest searchRequest = new SearchRequest(employees, companies, projects, null);
	  DocumentIDsWrapper wrapper =  requester.getDocumentIDs(searchRequest);
	  
	  List<String> docIdList = new ArrayList<String>();
	  docIdList = wrapper.getDocuments();
	  
	  for( String docId: docIdList){
		    Document document = requester.getDocument(docId);
		  	DocumentReceivedEvent documentReceivedEvent = new DocumentReceivedEvent( document);
		  	new EventService().insertCustom( documentReceivedEvent);
	   }
end

rule "Request a document for an employee"
    when
      $ere : EmployeeReceivedEvent() from entry-point SpeechTokenEventStream ;
    then
      resultList.add( "Request a document for an employee");
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
	  List<String> employees = new ArrayList<String>();
	  employees.add($ere.getEmployee().getEmployeeID());
	  List<String> companies = new ArrayList<String>();
	  List<String> projects = new ArrayList<String>();
	  SearchRequest searchRequest = new SearchRequest(employees, companies, projects, null);
	  DocumentIDsWrapper wrapper =  requester.getDocumentIDs(searchRequest);
	  
	  List<String> docIdList = new ArrayList<String>();
	  docIdList = wrapper.getDocuments();
	  
	  for( String docId: docIdList){
		    Document document = requester.getDocument(docId);
		  	DocumentReceivedEvent documentReceivedEvent = new DocumentReceivedEvent( document);
		  	new EventService().insertCustom( documentReceivedEvent);
	   }
end


//////////////////////////////////////////////////////
////////////// Events -> SpeechToken /////////////////
//////////////////////////////////////////////////////

rule "send Document to SpeechToken"
    when
      $dre : DocumentReceivedEvent() from entry-point SpeechTokenEventStream;
     then
      resultList.add( "send Document to SpeechToken");
      SpeechTokenSender sender = new SpeechTokenSender();
      
      List<User> activeUsers = EventService.getActiveUsers();
      for( User user: activeUsers) {
        DocumentForSpeechTokenizer documentForSpeechTokenizer = new DocumentForSpeechTokenizer(user, $dre.getDocument()); 
        sender.sendDocument( documentForSpeechTokenizer); 
        DocumentSentEvent documentSentEvent = new DocumentSentEvent( documentForSpeechTokenizer);
        new EventService().insertCustom(documentSentEvent);
	  }      
end