package de.hdm.wim.events;

import de.hdm.wim.events.model.Token;
import de.hdm.wim.events.model.Project;
import de.hdm.wim.events.model.Document;
import de.hdm.wim.events.model.DocumentForSpeechTokenizer;
import de.hdm.wim.events.model.ProjectReceivedEvent;
import de.hdm.wim.events.model.DocumentReceivedEvent;

import de.hdm.wim.events.documentrepresentation.DocumentRepresentationRequester;
import de.hdm.wim.events.documentrepresentation.SearchRequest;
import de.hdm.wim.events.speechtokenizer.SpeechTokenSender;

global java.util.List resultList;

declare Token
    @role( event )
    @timestamp( timestamp.getTime() ) //long
end

rule "A Token occured" dialect "mvel"
  when
      $t : Token() from entry-point SpeechTokenEventStream
  then
  	  resultList.add( "A Token occured");
end

rule "A Token with exactly 1 related project occured"
    when
        $t : Token( keywordInformation.projects.size() == 1, 
        			keywordInformation.companies.empty,
        			keywordInformation.products.empty,
        			keywordInformation.employees.empty) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with exactly 1 related project occured");
      System.out.println( "A Token with exactly 1 related project occured");
      
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
      Project project = requester.getProject($t.getKeywordInformation().getProjects().get(0));
      System.out.println( "requested project: " + project);
      insert( new ProjectReceivedEvent( project));
end

rule "A Token with exactly 1 related company occured"
    when
        $t : Token( keywordInformation.projects.empty, 
        			keywordInformation.companies.size() == 1,
        			keywordInformation.products.empty,
        			keywordInformation.employees.empty) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with exactly 1 related company occured");
      System.out.println( "A Token with exactly 1 related company occured"); 
end

rule "A Token with exactly 1 related product occured"
    when
        $t : Token( keywordInformation.projects.empty, 
        			keywordInformation.companies.empty,
        			keywordInformation.products.size() == 1,
        			keywordInformation.employees.empty) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with exactly 1 related product occured");
      System.out.println( "A Token with exactly 1 related product occured"); 
end

rule "A Token with exactly 1 related employee occured"
    when
        $t : Token( keywordInformation.projects.empty, 
        			keywordInformation.companies.empty,
        			keywordInformation.products.empty,
        			keywordInformation.employees.size() == 1) from entry-point SpeechTokenEventStream 
    then
      resultList.add( "A Token with exactly 1 related employee occured");
      System.out.println( "A Token with exactly 1 related employee occured"); 
end

rule "Request a document for a project"
    when
      $pre : ProjectReceivedEvent();
    then
      resultList.add( "Request a document for a project");
      DocumentRepresentationRequester requester = new DocumentRepresentationRequester();
      SearchRequest searchRequest = new SearchRequest();
      Document document = requester.getDocument(searchRequest);
      System.out.println( "found document: " + document);
      insert( new DocumentReceivedEvent( document));
end

rule "send Document to SpeechToken"
    when
      $dre : DocumentReceivedEvent();
    then
      resultList.add( "send Document to SpeechToken");
      SpeechTokenSender sender = new SpeechTokenSender();
      DocumentForSpeechTokenizer documentForSpeechTokenizer = new DocumentForSpeechTokenizer("userId", "hangoutsId", $dre.getDocument()); //TODO
      sender.sendDocument( documentForSpeechTokenizer); 
end

